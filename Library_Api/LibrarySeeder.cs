using Library_Api.Entity;
using Microsoft.EntityFrameworkCore;

namespace Library_Api
{
    public class LibrarySeeder
    {
        private readonly LibraryDbContext _dbContext;
        private List<Tag> _tags;

        public LibrarySeeder(LibraryDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public void Seed()
        {
            if (_dbContext.Database.CanConnect() && _dbContext.Database.IsRelational())
            {
                var pendingMigrations = _dbContext.Database.GetPendingMigrations();
                if (pendingMigrations != null && pendingMigrations.Any())
                {
                    _dbContext.Database.Migrate();
                }
                if (!_dbContext.Roles.Any())
                {
                    var roles = GetRoles();
                    _dbContext.Roles.AddRange(roles);
                    _dbContext.SaveChanges();
                }
                //sample books and tags generated by chat GPT to present api features
                _tags = GetTags();
                if (!_dbContext.Tags.Any())
                {
                    _dbContext.Tags.AddRange(_tags);
                    _dbContext.SaveChanges();
                }

                if (!_dbContext.Books.Any())
                {
                    var books = GetBooks();
                    _dbContext.Books.AddRange(books);
                    _dbContext.SaveChanges();
                }
            }
        }

        private IEnumerable<Role> GetRoles()
        {
            var roles = new List<Role>()
            {
                new Role()
                {
                    Name = "User"
                },
                new Role()
                {
                Name = "Librarian"
                },
                new Role()
                {
                    Name = "Admin"
                },
            };
            return roles;
        }

        private IEnumerable<Book> GetBooks()
        {
            var books = new List<Book>()
            {
                new Book()
                {
                    Tittle="The Great Gatsby",
                    Author="Scott Fitzgerald",
                    PublishDate=new DateTime(1925,4,10),
                    Tags=_tags
                    .Take(3)
                    .ToList()
                },
                new Book()
                {
                    Tittle="The Hunger Games",
                    Author="Suzanne Collins",
                    PublishDate=new DateTime(2008,9,14),
                    Tags=_tags
                    .Skip(3)
                    .Take(3)
                    .ToList()
                },
                new Book()
                {
                    Tittle="The Catcher in the Rye",
                    Author="J.D. Salinger",
                    PublishDate=new DateTime(1951,7,16),
                    Tags=_tags
                    .Skip(6)
                    .Take(3)
                    .ToList()
                },
                new Book()
                {
                    Tittle="The Da Vinci Code",
                    Author="Dan Brown",
                    PublishDate=new DateTime(2003,3,18),
                    Tags=_tags
                    .Skip(9)
                    .Take(3)
                    .ToList()
                },
                new Book()
                {
                    Tittle="The Hitchhiker's Guide to the Galaxy",
                    Author="Douglas Adams",
                    PublishDate=new DateTime(1979,10,12),
                    Tags=_tags
                    .Skip(12)
                    .Take(3)
                    .ToList()
                },
            };
            return books;
        }

        private List<Tag> GetTags()
        {
            var tags = new List<Tag>()
            {
                new Tag()
                {
                    Name="literature"
                },
                new Tag()
                {
                    Name="jazz age"
                },
                 new Tag()
                {
                    Name="romance"
                },
                 new Tag()
                {
                    Name="young adult"
                },
                new Tag()
                {
                    Name="dystopian"
                },
                 new Tag()
                {
                    Name="action"
                },
                 new Tag()
                {
                    Name="coming of age"
                },
                new Tag()
                {
                    Name="bildungsroman"
                },
                 new Tag()
                {
                    Name="modern classic"
                },
                 new Tag()
                {
                    Name="thriller"
                },
                new Tag()
                {
                    Name="conspiracy"
                },
                 new Tag()
                {
                    Name="art history"
                },
                 new Tag()
                {
                    Name="science fiction"
                },
                new Tag()
                {
                    Name="humor"
                },
                 new Tag()
                {
                    Name="satire"
                },
            };
            return tags;
        }
    }
}